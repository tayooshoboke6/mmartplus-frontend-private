import React, { useState, useEffect, ChangeEvent } from 'react';
import styled from 'styled-components';
import api from '../../services/api';
import LoadingSpinner from '../../components/common/LoadingSpinner';

// Styled Components
const Container = styled.div`
  padding: 24px;
  max-width: 1200px;
  margin: 0 auto;
  
  @media (max-width: 768px) {
    padding: 16px;
  }
  
  @media (max-width: 480px) {
    padding: 12px;
  }
`;

const Title = styled.h1`
  font-size: 28px;
  font-weight: 500;
  margin-bottom: 24px;
  color: #333;
`;

const HeaderContainer = styled.div`
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 24px;
  
  @media (max-width: 768px) {
    margin-bottom: 16px;
  }
  
  @media (max-width: 480px) {
    flex-direction: column;
    align-items: flex-start;
    gap: 12px;
  }
`;

const StyledPaper = styled.div`
  padding: 24px;
  background-color: white;
  border-radius: 8px;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  margin-bottom: 24px;
  
  @media (max-width: 768px) {
    padding: 16px;
  }
  
  @media (max-width: 480px) {
    padding: 12px;
  }
`;

const Grid = styled.div`
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
  gap: 24px;
  
  @media (max-width: 768px) {
    grid-template-columns: repeat(auto-fill, minmax(240px, 1fr));
    gap: 16px;
  }
  
  @media (max-width: 480px) {
    grid-template-columns: 1fr;
    gap: 12px;
  }
`;

const Card = styled.div`
  border-radius: 8px;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  overflow: hidden;
  display: flex;
  flex-direction: column;
  background-color: white;
  transition: transform 0.2s, box-shadow 0.2s;
  
  &:hover {
    transform: translateY(-4px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
  }
`;

const CardMedia = styled.div<{ backgroundUrl?: string }>`
  height: 140px;
  background-image: ${props => props.backgroundUrl ? `url(${props.backgroundUrl})` : 'none'};
  background-size: cover;
  background-position: center;
  background-color: ${props => props.backgroundUrl ? 'transparent' : '#f5f5f5'};
  display: flex;
  align-items: center;
  justify-content: center;
`;

const CardContent = styled.div`
  padding: 16px;
  flex: 1;
  display: flex;
  flex-direction: column;
  
  @media (max-width: 480px) {
    padding: 12px;
  }
`;

const CardTitle = styled.h3`
  margin: 0 0 8px 0;
  font-size: 18px;
`;

const CardDescription = styled.p`
  color: #666;
  font-size: 14px;
  margin: 0 0 16px 0;
`;

const CardActions = styled.div`
  display: flex;
  justify-content: flex-end;
  padding: 8px 16px 16px;
`;

const IconButton = styled.button`
  width: 36px;
  height: 36px;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  border: none;
  background-color: transparent;
  cursor: pointer;
  color: #666;
  
  &:hover {
    background-color: rgba(0, 0, 0, 0.05);
  }
`;

const EditIcon = () => (
  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
    <path d="M17 3a2.828 2.828 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5L17 3z"></path>
  </svg>
);

const DeleteIcon = () => (
  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
    <path d="M3 6h18"></path>
    <path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"></path>
    <line x1="10" y1="11" x2="10" y2="17"></line>
    <line x1="14" y1="11" x2="14" y2="17"></line>
  </svg>
);

// Category interface
interface Category {
  id: number;
  name: string;
  slug: string;
  description: string | null;
  image_url: string | null;
  parent_id: number | null;
  color: string | null;
  order: number;
  is_active: boolean;
  created_at: string;
  updated_at: string;
  children?: Category[];
}

// Form data interface
interface CategoryFormData {
  name: string;
  description: string;
  parent_id: number | null;
  image_url: string | null;
  color: string | null;
  order: number;
  is_active: boolean;
  image?: File | null;
}

/**
 * Admin page for managing categories
 */
const CategoryManager: React.FC = () => {
  const [categories, setCategories] = useState<Category[]>([]);
  const [loading, setLoading] = useState(true);
  const [formData, setFormData] = useState<CategoryFormData>({
    name: '',
    description: '',
    parent_id: null,
    image_url: null,
    color: '#ffffff',
    order: 0,
    is_active: true,
    image: null
  });
  const [selectedCategory, setSelectedCategory] = useState<Category | null>(null);
  const [openDialog, setOpenDialog] = useState(false);
  const [activeTab, setActiveTab] = useState(0);
  const [imagePreview, setImagePreview] = useState<string | null>(null);

  // Fetch categories on component mount
  useEffect(() => {
    fetchCategories();
  }, []);

  // Handle tab change
  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {
    setActiveTab(newValue);
  };

  // Fetch categories from API
  const fetchCategories = async () => {
    try {
      setLoading(true);
      const response = await api.get('/categories');
      if (response.data.status === 'success') {
        setCategories(response.data.data);
      }
    } catch (error) {
      console.error('Error fetching categories:', error);
    } finally {
      setLoading(false);
    }
  };

  // Handle form input changes
  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
    const { name, value, type } = e.target as HTMLInputElement;
    
    setFormData(prev => ({
      ...prev,
      [name]: type === 'checkbox' ? (e.target as HTMLInputElement).checked : value
    }));
  };

  // Handle image upload
  const handleImageChange = (e: ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      const file = e.target.files[0];
      setFormData(prev => ({
        ...prev,
        image: file
      }));
      
      // Create preview URL
      const reader = new FileReader();
      reader.onloadend = () => {
        setImagePreview(reader.result as string);
      };
      reader.readAsDataURL(file);
    }
  };

  // Handle form submission
  const handleFormSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    try {
      const formDataToSend = new FormData();
      formDataToSend.append('name', formData.name);
      formDataToSend.append('description', formData.description || '');
      if (formData.parent_id !== null) {
        formDataToSend.append('parent_id', formData.parent_id.toString());
      }
      if (formData.color) {
        formDataToSend.append('color', formData.color);
      }
      formDataToSend.append('order', formData.order.toString());
      formDataToSend.append('is_active', formData.is_active ? '1' : '0');
      
      if (formData.image) {
        formDataToSend.append('image', formData.image);
      }
      
      if (selectedCategory) {
        // Update existing category
        await api.post(`/admin/categories/${selectedCategory.id}?_method=PUT`, formDataToSend, {
          headers: {
            'Content-Type': 'multipart/form-data',
          }
        });
      } else {
        // Create new category
        await api.post('/admin/categories', formDataToSend, {
          headers: {
            'Content-Type': 'multipart/form-data',
          }
        });
      }
      
      setOpenDialog(false);
      resetForm();
      fetchCategories();
    } catch (error) {
      console.error('Error saving category:', error);
    }
  };

  // Reset form data
  const resetForm = () => {
    setFormData({
      name: '',
      description: '',
      parent_id: null,
      image_url: null,
      color: '#ffffff',
      order: 0,
      is_active: true,
      image: null
    });
    setSelectedCategory(null);
    setImagePreview(null);
  };

  // Handle edit category
  const handleEditCategory = (category: Category) => {
    setSelectedCategory(category);
    setFormData({
      name: category.name,
      description: category.description || '',
      parent_id: category.parent_id,
      image_url: category.image_url,
      color: category.color || '#ffffff',
      order: category.order || 0,
      is_active: category.is_active,
      image: null
    });
    setImagePreview(category.image_url);
    setOpenDialog(true);
  };

  // Handle delete category
  const handleDeleteCategory = async (id: number) => {
    if (window.confirm('Are you sure you want to delete this category?')) {
      try {
        await api.delete(`/admin/categories/${id}`);
        fetchCategories();
      } catch (error) {
        console.error('Error deleting category:', error);
      }
    }
  };

  return (
    <Container>
      <HeaderContainer>
        <Title>Category Management</Title>
        <StyledButton 
          variant="contained" 
          onClick={() => {
            setSelectedCategory(null);
            resetForm();
            setOpenDialog(true);
          }}
          style={{ 
            backgroundColor: '#0071BC',
            padding: '10px 16px',
            borderRadius: '6px',
            boxShadow: '0 2px 4px rgba(0, 0, 0, 0.1)',
            transition: 'all 0.2s ease'
          }}
        >
          Add New Category
        </StyledButton>
      </HeaderContainer>
      
      {categories.length > 0 && (
        <StyledPaper>
          <Grid>
            {categories.map(category => (
              <Card key={category.id}>
                <CardMedia backgroundUrl={category.image_url || "https://via.placeholder.com/400x200?text=No+Image"} />
                <ColorIndicator color={category.color || '#eeeeee'} />
                <CardContent>
                  <CardTitle>{category.name}</CardTitle>
                  <CardDescription>{category.description || 'No description'}</CardDescription>
                  {category.parent_id && (
                    <ParentInfo>
                      Parent: {categories.find(c => c.id === category.parent_id)?.name || 'Unknown'}
                    </ParentInfo>
                  )}
                  <CardMeta>
                    {category.is_active ? (
                      <StatusBadge active>Active</StatusBadge>
                    ) : (
                      <StatusBadge>Inactive</StatusBadge>
                    )}
                    <OrderIndicator>Order: {category.order}</OrderIndicator>
                  </CardMeta>
                  
                  <IconButton onClick={() => handleEditCategory(category)}>
                    <EditIcon />
                  </IconButton>
                  <IconButton onClick={() => handleDeleteCategory(category.id)}>
                    <DeleteIcon />
                  </IconButton>
                </CardContent>
              </Card>
            ))}
          </Grid>
        </StyledPaper>
      )}
      
      {loading && (
        <LoadingSpinner />
      )}
      
      {/* Category Dialog */}
      <Dialog open={openDialog} onClose={() => setOpenDialog(false)}>
        <DialogContent>
          <DialogTitle>
            {selectedCategory ? `Edit Category: ${selectedCategory.name}` : 'Create New Category'}
          </DialogTitle>
          <DialogBody>
            <form onSubmit={handleFormSubmit}>
              <FormTextField
                label="Category Name"
                name="name"
                value={formData.name}
                onChange={handleInputChange}
                required
              />
              
              <FormGroup>
                <FormLabel>Category Image</FormLabel>
                <FileInput type="file" accept="image/*" onChange={handleImageChange} />
                {(imagePreview || formData.image_url) && (
                  <ImagePreview src={imagePreview || formData.image_url || ''} alt="Category Preview" />
                )}
              </FormGroup>
              
              <FormTextField
                label="Description"
                name="description"
                value={formData.description}
                onChange={handleInputChange}
                multiline
                rows={3}
              />
              
              <FormGroup>
                <FormLabel>Parent Category</FormLabel>
                <Select 
                  name="parent_id" 
                  value={formData.parent_id || ''} 
                  onChange={handleInputChange}
                >
                  <option value="">None</option>
                  {categories
                    .filter(cat => (!selectedCategory || cat.id !== selectedCategory.id))
                    .map(category => (
                      <option key={category.id} value={category.id}>
                        {category.name}
                      </option>
                    ))
                  }
                </Select>
              </FormGroup>
              
              <FormGroup>
                <FormLabel>Color</FormLabel>
                <ColorInput 
                  type="color" 
                  name="color" 
                  value={formData.color || '#ffffff'} 
                  onChange={handleInputChange} 
                />
              </FormGroup>
              
              <FormGroup>
                <FormLabel>Display Order</FormLabel>
                <NumberInput 
                  type="number" 
                  name="order" 
                  value={formData.order} 
                  onChange={handleInputChange} 
                  min="0"
                />
              </FormGroup>
              
              <FormGroup>
                <CheckboxContainer>
                  <CheckboxInput
                    type="checkbox"
                    name="is_active"
                    checked={formData.is_active}
                    onChange={handleInputChange}
                  />
                  <CheckboxLabel>Active</CheckboxLabel>
                </CheckboxContainer>
              </FormGroup>
              
              <DialogActions>
                <StyledButton onClick={() => setOpenDialog(false)}>Cancel</StyledButton>
                <StyledButton type="submit" variant="contained">Save</StyledButton>
              </DialogActions>
            </form>
          </DialogBody>
        </DialogContent>
      </Dialog>
    </Container>
  );
};

const Dialog = styled.div<{ open: boolean }>`
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: rgba(0, 0, 0, 0.5);
  display: ${props => props.open ? 'flex' : 'none'};
  justify-content: center;
  align-items: center;
  z-index: 1000;
`;

const DialogContent = styled.div`
  background-color: white;
  border-radius: 8px;
  width: 90%;
  max-width: 600px;
  max-height: 90vh;
  overflow-y: auto;
  padding: 24px;
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
`;

const DialogTitle = styled.h2`
  margin-top: 0;
  margin-bottom: 24px;
  color: #333;
  font-size: 24px;
  font-weight: 500;
`;

const DialogBody = styled.div``;

const DialogActions = styled.div`
  display: flex;
  justify-content: flex-end;
  margin-top: 24px;
  gap: 12px;
`;

const FormTextField = styled.input`
  width: 100%;
  padding: 12px;
  border: 1px solid #ddd;
  border-radius: 4px;
  margin-bottom: 16px;
  font-size: 16px;
  transition: border-color 0.2s;
  
  &:focus {
    outline: none;
    border-color: #0071BC;
  }
  
  &[type="textarea"] {
    min-height: 100px;
    resize: vertical;
  }
`;

const StyledButton = styled.button<{ variant?: string }>`
  padding: 10px 16px;
  font-size: 16px;
  font-weight: 500;
  border-radius: 4px;
  cursor: pointer;
  transition: all 0.2s;
  
  ${({ variant }) => 
    variant === 'contained' ? `
      background-color: #0071BC;
      color: white;
      border: none;
      
      &:hover {
        background-color: #005ea3;
      }
    ` : `
      background-color: transparent;
      color: #0071BC;
      border: 1px solid #0071BC;
      
      &:hover {
        background-color: rgba(0, 113, 188, 0.08);
      }
    `}
    
  &:disabled {
    cursor: not-allowed;
    opacity: 0.6;
  }
`;

const Grid = styled.div`
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
  gap: 24px;
`;

const Card = styled.div`
  border-radius: 8px;
  overflow: hidden;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  transition: all 0.3s ease;
  position: relative;
  
  &:hover {
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    transform: translateY(-4px);
  }
`;

const CardMedia = styled.div<{ backgroundUrl: string }>`
  height: 160px;
  background-image: url(${props => props.backgroundUrl});
  background-size: cover;
  background-position: center;
`;

const CardContent = styled.div`
  padding: 16px;
`;

const CardTitle = styled.h3`
  margin-top: 0;
  margin-bottom: 8px;
  font-size: 18px;
  color: #333;
`;

const CardDescription = styled.p`
  color: #666;
  margin-bottom: 16px;
  font-size: 14px;
  line-height: 1.4;
`;

const ColorIndicator = styled.div<{ color: string }>`
  position: absolute;
  top: 12px;
  right: 12px;
  width: 24px;
  height: 24px;
  background-color: ${props => props.color};
  border-radius: 50%;
  border: 2px solid white;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
`;

const IconButton = styled.button`
  background: none;
  border: none;
  cursor: pointer;
  padding: 8px;
  margin-right: 8px;
  border-radius: 50%;
  transition: background-color 0.2s;
  
  &:hover {
    background-color: #f0f0f0;
  }
`;

const EmptyState = styled.div`
  text-align: center;
  padding: 48px 0;
  color: #666;
`;

const FormGroup = styled.div`
  margin-bottom: 16px;
`;

const FormLabel = styled.label`
  display: block;
  margin-bottom: 8px;
  font-weight: 500;
  color: #333;
`;

const Select = styled.select`
  width: 100%;
  padding: 12px;
  border: 1px solid #ddd;
  border-radius: 4px;
  font-size: 16px;
  transition: border-color 0.2s;
  
  &:focus {
    outline: none;
    border-color: #0071BC;
  }
`;

const FileInput = styled.input`
  margin-bottom: 8px;
`;

const ImagePreview = styled.img`
  max-width: 100%;
  max-height: 200px;
  margin-top: 8px;
  border-radius: 4px;
  border: 1px solid #ddd;
`;

const ColorInput = styled.input`
  width: 50px;
  height: 50px;
  padding: 0;
  border: none;
  border-radius: 4px;
  cursor: pointer;
`;

const NumberInput = styled.input`
  width: 100%;
  padding: 12px;
  border: 1px solid #ddd;
  border-radius: 4px;
  font-size: 16px;
`;

const CheckboxContainer = styled.div`
  display: flex;
  align-items: center;
`;

const CheckboxInput = styled.input`
  margin-right: 8px;
`;

const CheckboxLabel = styled.label`
  font-weight: normal;
`;

const ParentInfo = styled.div`
  font-size: 14px;
  color: #666;
  margin-bottom: 8px;
`;

const CardMeta = styled.div`
  display: flex;
  align-items: center;
  margin-bottom: 16px;
`;

const StatusBadge = styled.span<{ active?: boolean }>`
  padding: 4px 8px;
  border-radius: 4px;
  font-size: 12px;
  margin-right: 8px;
  background-color: ${props => props.active ? '#e6f7ee' : '#f8f8f8'};
  color: ${props => props.active ? '#0d904b' : '#666'};
  border: 1px solid ${props => props.active ? '#c3e6d5' : '#ddd'};
`;

const OrderIndicator = styled.span`
  font-size: 12px;
  color: #666;
`;

export default CategoryManager;
